#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>
#include <time.h>
#include <stdlib.h>

//dont

int initialization();
void gameLoop();
void teardown();
void displayWorld();
void acceptInput();
bool isDone();
bool formatInput(char *str);
void getLetterDistribution(char *str, int letter_count[]);
bool compareCounts(char *guess, char *availableletters);

int main() {
    initialization();
    gameLoop();
    teardown();
    return 0;
}

//main game functions
int initialization() {
    srand(time(NULL));
    return 0;
}

void gameLoop() {
    do {
    displayWorld();
    acceptInput();

    if(isDone()){
        break;
        }
    }while(true);
}

void teardown(){
    printf("All done");
}

//gameloop functions
void displayWorld(){
    printf("---------------------\n");
}

void acceptInput() {
    char buffer[100];
    bool validInput = false;
    
    char availablelettertest[] = "ADEFNORRSSW";

    while (!validInput) {
        printf("Enter a guess:");
        fgets(buffer, sizeof(buffer), stdin);
        
        // Only proceed if formatInput returns true (valid input)
        if (formatInput(buffer)) {
            printf("You entered: %s\n", buffer);
            
            if(compareCounts(buffer, availablelettertest)){
                validInput = true;
                
                printf("The word can be formed from the available letters.\n");
            }
            else{
                 printf("The word cannot be formed from the available letters.\n");
            }
            
        } else {
            printf("Invalid input! Please enter letters only.\n");
        }
    }
}

bool isDone() {
    return true;
}

// other functions
bool formatInput(char *str) {
    int i = 0;
    bool isAlphabetic = true;

    while (str[i]) {
        if (str[i] == '\r' || str[i] == '\n') {
            str[i] = '\0';  // Null-terminate the string
            break;
        }
        
        // Check if character is a letter and Set to false if any non-letter is found
        if (!isalpha((unsigned char)str[i])) {
            isAlphabetic = false;  
        }

        str[i] = toupper((unsigned char)str[i]);  
        i++;
    }

    return isAlphabetic;
}

void getLetterDistribution(char *str, int letter_count[]) {
    // Initialize the letter count array
    for (int i = 0; i < 26; i++) {
        letter_count[i] = 0;
    }

    for (int i = 0; str[i] != '\0'; i++) {
        char ch = str[i];
        if (isalpha(ch)) {  // Check if the character is a letter
            letter_count[ch - 'A']++;  // Increment the corresponding index
        }
    }
}

bool compareCounts(char *guess, char *availableletters) {
    int wordDistribution[26] = {0};  // To hold the distribution of the guess
    int letterChoicesDistribution[26] = {0};  // To hold the distribution of available letters

    // Get the distributions for both the guess and available letters
    getLetterDistribution(guess, wordDistribution);
    getLetterDistribution(availableletters, letterChoicesDistribution);
    
    /*
    printf("Guess Distribution: ");
    for (int i = 0; i < 26; i++) {
        
            printf("%c: %d ", i + 'A', wordDistribution[i]);
        
    }
    printf("\n");

    printf("Available Letters Distribution: ");
    for (int i = 0; i < 26; i++) {
        
            printf("%c: %d ", i + 'A', letterChoicesDistribution[i]);
        
    }
    printf("\n"); */

    // Compare the distributions
    for (int i = 0; i < 26; i++) {
        if (wordDistribution[i] > letterChoicesDistribution[i]) {
            return false;  // If the word needs more of any letter than available, return false
        }
    }

    return true;  // Return true if all letters in wordDistribution can be made from letterChoicesDistribution
}

